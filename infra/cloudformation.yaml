AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for the AI Networking Agent.
  This template sets up an ECS cluster with a Fargate service to run the agent,
  plus Secrets Manager for credentials and CloudWatch for logging.

Parameters:
  ImageURI:
    Type: String
    Description: The ECR image URI for the Docker container.

Resources:
  # --- ECS Cluster ---
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: NetworkingAgentCluster

  # --- ECS Task Definition ---
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: NetworkingAgentTask
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: networking-agent
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # --- ECS Service ---
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            # Add your subnet IDs here
            - "subnet-xxxxxxxx"
            - "subnet-yyyyyyyy"
          SecurityGroups:
            # Add your security group ID here
            - "sg-zzzzzzzz"
          AssignPublicIp: ENABLED

  # --- IAM Roles ---
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Role policies to allow pulling from ECR, etc.
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      # Role policies for the application (e.g., access to S3, Secrets Manager)
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # --- Secrets Manager ---
  AppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "NetworkingAgentSecrets"
      Description: "API keys and credentials for the Networking Agent"
      SecretString: '{ "OPENAI_API_KEY": "your-key", "LINKEDIN_EMAIL": "your-email" }'

  # --- CloudWatch ---
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/NetworkingAgent

Outputs:
  ServiceURL:
    Description: The URL of the running service (if using a load balancer)
    Value: "To be implemented with a Load Balancer"
